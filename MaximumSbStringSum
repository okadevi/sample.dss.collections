package ds.alg;

public class MaximumSubStringSum {
	public static void main(String[] args) {
		int[] arr = {1,20,3,-8,-6,7,-2};
		int[] arr_1 = {-11,3,7,-18,4,-2,1,-1,22};

		System.out.println(bruteForce(arr));	
		System.out.println(execute(arr_1));
	}
	
	/**
	 * Complexity O(n^2)
	 * @param arr
	 * @return
	 */
	public static int bruteForce(int[] arr) {
		int maxSum = 0;
		for (int i = 0; i < arr.length ; i++) {
			int preSum = arr[i];
			for (int j = i ; j < arr.length; j++) {
				if (i != j) {
					preSum = arr[j] + preSum;
				}
				
				if (maxSum < preSum) {
					maxSum = preSum;
				}
			}
		}
		
		return maxSum;
	}
	
	/**
	 * Finding maximum sum subarray using Kadane's algorithm, time complexity O(n)
	 * @param arr
	 * @return
	 */
	public static int execute(int[] arr) {
		int  maxSum = 0,
				previousSum = 0,
				currentSum = 0;
		
		for (int i = 0; i < arr.length; i++) {
			if (i == 0) {
				previousSum = arr[i];
				maxSum = arr[i];
				currentSum = arr[i];
			}
			
			if (previousSum <= 0) {
				currentSum = arr[i];
			} else {
				currentSum = arr[i] + previousSum;
			}
			
			if (maxSum < currentSum) {
				maxSum = currentSum;
			} 
			previousSum = currentSum;
		}
		
		return maxSum;
	}
		
}
