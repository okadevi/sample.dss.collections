package co.algs.in;

import java.util.Stack;


public class LCA {
	public static void main(String[] args) {
		/**
		 *                 1
		 *              /     \
		 *            3          2
		 *          /  \        /  \
		 *         7   88       5    4
		 *             /  \
		 *            9    8
		 *             \
		 *              10
		 *              /
		 *             11 
		 */
		Tree tree_11 = new Tree(11,null,null);
		Tree tree_10 = new Tree(10,tree_11,null);
		Tree tree_9 = new Tree(9,null,tree_10);
		Tree tree_8 = new Tree(8,null,null);
		Tree tree_88 = new Tree(88,tree_9,tree_8);
		Tree tree_7 = new Tree(7,null,null);
		Tree tree_3 = new Tree(3,tree_7,tree_88);
		Tree tree_5 = new Tree(5,null,null);
		Tree tree_4 = new Tree(4,null,null);
		Tree tree_2 = new Tree(2,tree_5,tree_4);
		Tree tree_1 = new Tree(1,tree_3,tree_2);
		
		System.out.println(fetchLowestCommonValue(11,7,tree_1));
	}
	public static int fetchLowestCommonValue(int x, int y,Tree root) {
		Stack<Integer> stk_x = new Stack<>();
		Stack<Integer> stk_y = new Stack<>();
		traverse(x, stk_x, root);
		traverse(y, stk_y, root);
		
		return comparePath(stk_x, stk_y);
	}
	
	private static int comparePath(Stack<Integer> pathX, Stack<Integer> pathY) {
		Stack<Integer> longer_stk = null;
		Stack<Integer> smaller_stk = null;
		
		int diff_length = pathX.size() - pathY.size();
		if (diff_length < 0) {
			longer_stk = pathY;
			smaller_stk = pathX;
		} else {
			longer_stk = pathX;
			smaller_stk = pathY;
		}
		
		diff_length = Math.abs(diff_length);
		while (diff_length > 0) {
			longer_stk.pop();
			diff_length--;
		}
		

		while (longer_stk.peek() != smaller_stk.peek()) {
			longer_stk.pop();
			smaller_stk.pop();
		}
		
		return longer_stk.peek();
	}
	
	private static boolean traverse(int no, Stack<Integer> stk, Tree root) {
		//Root,Left,Right traversal
		if (root == null) {
			return false;
		}
	
		if (root.data == no) {
			stk.add(root.data);	
			return true;
		} else {
			stk.add(root.data);
			if (traverse(no, stk, root.left)) {
				return true;
			} else if (traverse(no, stk, root.right)) {
				return true;
			}
			stk.pop();
		}
		return false;
	}
	
	private static class Tree {
		Integer data;
		Tree left;
		Tree right;
		
		public Tree(Integer data, Tree left, Tree right) {
			this.data = data;
			this.left = left;
			this.right = right;
		}
	}
}
